name: Release and Publish

on:
  push:
    branches: [ main ]

jobs:
  release:
    if: contains(github.event.head_commit.message, 'release(')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12', '3.13']
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Get Version
        id: get_version
        run: |
          python - <<'PY'
          import os
          import pathlib
          import tomllib

          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text())
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"version={data['project']['version']}", file=fh)
          PY
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.get_version.outputs.version }} \
            --title "Release ${{ steps.get_version.outputs.version }}" \
            --notes "${{ github.event.head_commit.message }}"

  publish:
    needs: release
    if: contains(github.event.head_commit.message, 'release(')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
      - uses: astral-sh/setup-uv@v1
        with:
          version: "0.9.5"
      - name: Sync dependencies
        run: uv sync --all-extras
      - name: Build and publish
        env:
          PYPI_TOKEN_CI: ${{ secrets.PYPI_TOKEN_CI }}
        run: |
          uv build
          TWINE_USERNAME=__token__ TWINE_PASSWORD=$PYPI_TOKEN_CI uvx twine upload --non-interactive dist/*
